{
  "language": "Solidity",
  "sources": {
    "contracts/PredictionMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ncontract PredictionMarket {\r\n    event ProposalCreated(uint indexed proposalId, string description);\r\n    event Voted(uint indexed proposalId, address indexed voter, bytes encryptedVote);\r\n    event VotingClosed(uint indexed proposalId);\r\n\r\n    struct Proposal {\r\n        uint id; \r\n        string description;\r\n        mapping(address => bool) hasVoted;\r\n        bytes[] encryptedVotes;\r\n        string[] decryptedVotes;\r\n        uint quorum;\r\n        uint voteCount;\r\n    }\r\n\r\n    mapping(uint => Proposal) public proposals;\r\n    uint public nextProposalId = 1;\r\n\r\n    function createProposal(string memory description, uint quorum) external returns (uint proposalId) {\r\n        proposalId = nextProposalId;\r\n        nextProposalId++;\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.id = proposalId;\r\n        proposal.description = description;\r\n        proposal.quorum = quorum;\r\n        emit ProposalCreated(proposalId, description);\r\n    }\r\n\r\n    function getProposal(uint proposalId) external view returns (uint, string memory, uint, uint) {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        return (proposal.id, proposal.description, proposal.quorum, proposal.voteCount);\r\n    }\r\n\r\n    function vote(uint proposalId, bytes calldata encryptedVote) external {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(!proposal.hasVoted[msg.sender], \"Already voted\");\r\n        require(proposal.voteCount < proposal.quorum, \"Voting closed\");\r\n\r\n        proposal.encryptedVotes.push(encryptedVote);\r\n        proposal.hasVoted[msg.sender] = true;\r\n        proposal.voteCount++;\r\n\r\n        emit Voted(proposalId, msg.sender, encryptedVote);\r\n\r\n        if (proposal.voteCount >= proposal.quorum) {\r\n            emit VotingClosed(proposalId);\r\n        }\r\n    }\r\n\r\n    function getVotes(uint proposalId) external view returns (bytes[] memory) {\r\n        return proposals[proposalId].encryptedVotes;\r\n    }\r\n\r\n    struct ProposalInfo {\r\n        uint id;\r\n        string description;\r\n        uint quorum;\r\n        uint voteCount;\r\n        bytes[] encryptedVotes;\r\n    }\r\n\r\n    function getAllProposals(bool open) external view returns (ProposalInfo[] memory) {\r\n        uint count = 0;\r\n        for (uint i = 1; i < nextProposalId; i++) {\r\n            if ((proposals[i].voteCount < proposals[i].quorum) == open) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        ProposalInfo[] memory proposalsInfo = new ProposalInfo[](count);\r\n        uint index = 0;\r\n        for (uint i = 1; i < nextProposalId; i++) {\r\n            if ((proposals[i].voteCount < proposals[i].quorum) == open) {\r\n                Proposal storage proposal = proposals[i];\r\n                proposalsInfo[index] = ProposalInfo({\r\n                    id: proposal.id,\r\n                    description: proposal.description,\r\n                    quorum: proposal.quorum,\r\n                    voteCount: proposal.voteCount,\r\n                    encryptedVotes: open ? new bytes[](0) : proposal.encryptedVotes\r\n                });\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return proposalsInfo;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}