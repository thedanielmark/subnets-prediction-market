{
  "language": "Solidity",
  "sources": {
    "contracts/PredictionMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract PredictionMarket {\r\n    address public owner;\r\n    uint256 public marketCount;\r\n\r\n    struct Secrets {\r\n        string sharedSecret;\r\n        string publicKey;\r\n    }\r\n\r\n    mapping(uint256 => Secrets) private sharedSecret;\r\n\r\n    enum MarketOutcome {\r\n        NotResolved,\r\n        Yes,\r\n        No\r\n    }\r\n\r\n    struct Market {\r\n        uint256 id;\r\n        string question;\r\n        uint256 totalYesVotes;\r\n        uint256 totalNoVotes;\r\n        uint256 totalWinnings;\r\n        bytes[] encryptedVotes;\r\n        MarketOutcome outcome;\r\n        mapping(address => uint256) userVotes;\r\n        mapping(address => uint256) userWinnings;\r\n    }\r\n\r\n    mapping(uint256 => Market) public markets;\r\n\r\n    event MarketCreated(uint256 indexed id, string question);\r\n    event VotesBought(uint256 indexed id, address indexed buyer, uint256 amount, bool prediction);\r\n    event MarketResolved(uint256 indexed id, MarketOutcome outcome);\r\n    event WinningsClaimed(uint256 indexed id, address indexed claimer, uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier marketExists(uint256 _marketId) {\r\n        require(_marketId > 0 && _marketId <= marketCount, \"Invalid market ID\");\r\n        _;\r\n    }\r\n\r\n    modifier marketNotResolved(uint256 _marketId) {\r\n        require(\r\n            markets[_marketId].outcome == MarketOutcome.NotResolved,\r\n            \"Market already resolved\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        marketCount = 0;\r\n    }\r\n\r\n    function createMarket(\r\n        string memory _question,\r\n        string memory _publicKey,\r\n        string memory _sharedSecret\r\n    ) external onlyOwner {\r\n        marketCount++;\r\n        Market storage newMarket = markets[marketCount];\r\n        newMarket.id = marketCount;\r\n        newMarket.question = _question;\r\n        newMarket.outcome = MarketOutcome.NotResolved;\r\n\r\n        Secrets storage secret = sharedSecret[marketCount];\r\n        secret.sharedSecret = _sharedSecret;\r\n        secret.publicKey = _publicKey;\r\n\r\n        emit MarketCreated(marketCount, _question);\r\n    }\r\n\r\n    function buyVotes(\r\n        uint256 _marketId,\r\n        bool _prediction,\r\n        bytes calldata _encryptedVote\r\n    ) external payable marketExists(_marketId) marketNotResolved(_marketId) {\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n\r\n        Market storage market = markets[_marketId];\r\n        address buyer = msg.sender;\r\n\r\n        if (_prediction) {\r\n            market.totalYesVotes += msg.value;\r\n        } else {\r\n            market.totalNoVotes += msg.value;\r\n        }\r\n        market.encryptedVotes.push(_encryptedVote);\r\n        market.userVotes[buyer] += msg.value;\r\n        emit VotesBought(_marketId, buyer, msg.value, _prediction);\r\n    }\r\n\r\n    function resolveMarket(\r\n        uint256 _marketId,\r\n        bool _outcome\r\n    ) external onlyOwner marketExists(_marketId) marketNotResolved(_marketId) {\r\n        Market storage market = markets[_marketId];\r\n        market.totalWinnings = market.totalNoVotes + market.totalYesVotes;\r\n\r\n        if (_outcome) {\r\n            market.outcome = MarketOutcome.Yes;\r\n            emit MarketResolved(_marketId, MarketOutcome.Yes);\r\n        } else {\r\n            market.outcome = MarketOutcome.No;\r\n            emit MarketResolved(_marketId, MarketOutcome.No);\r\n        }\r\n    }\r\n\r\n    function claimWinnings(uint256 _marketId) external marketExists(_marketId) {\r\n        Market storage market = markets[_marketId];\r\n        require(market.outcome != MarketOutcome.NotResolved, \"Market not yet resolved\");\r\n\r\n        address claimer = msg.sender;\r\n        uint256 winnings = (market.userVotes[claimer] * market.totalWinnings) /\r\n            market.userVotes[claimer];\r\n        market.userWinnings[claimer] += winnings;\r\n\r\n        (bool success, ) = claimer.call{value: winnings}(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        emit WinningsClaimed(_marketId, claimer, winnings);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}